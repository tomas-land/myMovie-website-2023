generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([username], name: "username_index")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FavoriteMovie {
  id           String    @id @default(cuid()) // this is the id of the favorite movie
  title        String
  poster_path  String
  vote_average Float
  movieId      String // this is the id of the TMDB movie
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  userId       String
  isFavorite   Boolean   @default(true) // for soft deletion, to show recent favorite movies even they are removed from favorites
  release_date String
  mediaType    MediaType @default(movies)

  @@unique([userId, movieId]) // theses two fields should be unique, to be able to use prisma upsert method
}

model FavoriteTvSeries {
  id           String    @id @default(cuid())
  title        String
  poster_path  String
  vote_average Float
  seriesId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  userId       String
  isFavorite   Boolean   @default(true) // for soft deletion, to show recent favorite series even they are removed from favorites
  release_date String
  mediaType    MediaType @default(tv_series)

  @@unique([userId, seriesId]) // theses two fields should be unique, to be able to use prisma upsert method
}

model FavoritePerson {
  id           String    @id @default(cuid())
  name         String
  profile_path String
  popularity   Float?
  personId     Int // id of the person in TMDB
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  userId       String
}

model RatedItem {
  id           String    @id @default(cuid())
  media_id     String // the id of the movie or series in TMDB
  rating       String
  title        String
  poster_path  String
  vote_average Float
  release_date String
  mediaType    MediaType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  userId       String

  @@unique([userId, media_id]) // theses two fields should be unique, to be able to use prisma upsert method
}

model Watchlist {
  id           String    @id @default(cuid()) // auto generated id ( CUID (Collision-Proof Unique IDentifier) )
  media_id     String    @unique // the id of the movie or series in TMDB
  title        String
  poster_path  String
  vote_average Float
  release_date String
  mediaType    MediaType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  userId       String // the id of the user who added this content to his/her watchlist
}

enum MediaType {
  movies
  tv_series
}
